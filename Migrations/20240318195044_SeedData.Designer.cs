// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using movie_mart_api;

#nullable disable

namespace moviemartapi.Migrations
{
    [DbContext(typeof(MovieMartContext))]
    [Migration("20240318195044_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorsActorId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorsActorId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("movie_mart_api.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            Name = "Actor1"
                        },
                        new
                        {
                            ActorId = 2,
                            Name = "Actor2"
                        },
                        new
                        {
                            ActorId = 3,
                            Name = "Actor3"
                        });
                });

            modelBuilder.Entity("movie_mart_api.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectorId");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            DirectorId = 1,
                            Name = "Director1"
                        },
                        new
                        {
                            DirectorId = 2,
                            Name = "Director2"
                        },
                        new
                        {
                            DirectorId = 3,
                            Name = "Director3"
                        });
                });

            modelBuilder.Entity("movie_mart_api.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Action"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("movie_mart_api.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            Description = "Description for Movie1",
                            DirectorId = 1,
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            GenreId = 1,
                            ImageUrl = "https://m.media-amazon.com/images/M/MV5BNzQxNzQxNjk5NV5BMl5BanBnXkFtZTgwNTI4MTU0MzE@._V1_.jpg",
                            Language = "English",
                            ReleaseDate = new DateTime(2024, 3, 18, 20, 50, 44, 189, DateTimeKind.Local).AddTicks(2570),
                            Title = "IMAGE"
                        },
                        new
                        {
                            MovieId = 2,
                            Description = "Description for Movie2",
                            DirectorId = 2,
                            Duration = new TimeSpan(0, 1, 50, 0, 0),
                            GenreId = 2,
                            ImageUrl = "https://resizing.flixster.com/aqOkZpMlbwsRHEU9tpnBr8845YM=/fit-in/180x240/v2/https://resizing.flixster.com/O6GxoETackXlsx2N9MJPIbp4-54=/ems.cHJkLWVtcy1hc3NldHMvbW92aWVzLzQwNmE0YjRkLTFiM2ItNDk4Yi1hZTFhLWJiMDI2OTM1NDAyMy5qcGc=",
                            Language = "English",
                            ReleaseDate = new DateTime(2024, 3, 18, 20, 50, 44, 189, DateTimeKind.Local).AddTicks(2630),
                            Title = "TILL"
                        },
                        new
                        {
                            MovieId = 3,
                            Description = "Description for Movie 3",
                            DirectorId = 3,
                            Duration = new TimeSpan(0, 2, 10, 0, 0),
                            GenreId = 3,
                            ImageUrl = "https://m.media-amazon.com/images/I/81wR1ScI7nL._AC_UF1000,1000_QL80_.jpg",
                            Language = "English",
                            ReleaseDate = new DateTime(2024, 3, 18, 20, 50, 44, 189, DateTimeKind.Local).AddTicks(2640),
                            Title = "White Chicks"
                        });
                });

            modelBuilder.Entity("movie_mart_api.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("movie_mart_api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@example.com",
                            Password = "hashedPassword",
                            Token = "TempToken1",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "user2@example.com",
                            Password = "hashedPassword2",
                            Token = "TempToken2",
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("movie_mart_api.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movie_mart_api.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("movie_mart_api.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movie_mart_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("movie_mart_api.Models.Movie", b =>
                {
                    b.HasOne("movie_mart_api.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movie_mart_api.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("movie_mart_api.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("movie_mart_api.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
